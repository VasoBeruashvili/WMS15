/*
 * File: app/view/OutputProducts.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIS.view.OutputProducts', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.outputproducts',

    requires: [
        'Ext.form.field.ComboBox',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.toolbar.Paging',
        'Ext.grid.column.Date'
    ],

    border: false,
    height: 599,
    width: 746,
    iconCls: '',
    title: '',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            keyMapConfig: {
                bindings: [
                    {
                        ctrl: false,
                        key: Ext.EventObject.ENTER,
                        btnItemId: 'bntSearch'
                    },
                    {
                        ctrl: false,
                        key: Ext.EventObject.ESC,
                        btnItemId: 'btnClear'
                    }
                ]
            },
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'container',
                    margin: '10 10 0 10',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            storeClassName: 'SIS.store.AllProductStore',
                            flex: 1,
                            itemId: 'cmbProducts',
                            margin: '0 10 0 0',
                            clearCls: 'x-form-clear-trigger',
                            emptyText: 'საქონლის დასახელება',
                            enableKeyEvents: true,
                            selectOnFocus: true,
                            triggerCls: 'x-form-search-trigger',
                            displayField: 'Name',
                            minChars: 1,
                            store: 'AllProductStore',
                            typeAhead: true,
                            valueField: 'ID'
                        },
                        {
                            xtype: 'combobox',
                            storeClassName: 'SIS.store.AllCustomerStore',
                            flex: 1,
                            itemId: 'cmbCustomers',
                            margin: '0 10 0 0',
                            clearCls: 'x-form-clear-trigger',
                            emptyText: 'მყიდველის დასახელება',
                            enableKeyEvents: true,
                            selectOnFocus: true,
                            triggerCls: 'x-form-search-trigger',
                            displayField: 'Name',
                            minChars: 1,
                            store: 'AllCustomerStore',
                            typeAhead: true,
                            valueField: 'ID'
                        },
                        {
                            xtype: 'triggerfield',
                            onTriggerClick: function() {
                                var me = this;
                                var beforeStr = this.beforeValueText || this.emptyText || '';

                                var win = Ext.create(this.pickerClassName, {
                                    modal:true,
                                    save: function(rangeModel){
                                        var obj = {
                                            beforeStr: beforeStr,
                                            fromDate: rangeModel.get('FromDate'),
                                            toDate: rangeModel.get('ToDate')
                                        };

                                        me.setValue(obj);

                                        return EnumDialogResult.Success;
                                    }
                                });

                                win.setData();
                                win.show();
                            },
                            getValue: function() {
                                var obj = !(this.fromDate && this.toDate) ? null : {
                                    FromDate: this.fromDate,
                                    ToDate: this.toDate
                                };

                                return obj;
                            },
                            setValue: function(obj) {
                                if(!IsNullOrEmpty(obj)){
                                    var from = obj.fromDate;
                                    var to = obj.toDate;

                                    this.fromDate = from;
                                    this.toDate = to;

                                    var beforeStr = obj.beforeStr;

                                    if(obj.beforeStr === undefined){
                                        beforeStr = this.beforeValueText || this.emptyText || '';
                                    }

                                    this.setRawValue(beforeStr+': '+DateFormat(from) + ' '+DateFormat(to));
                                    inputEl = this.inputEl;
                                    if (inputEl && this.emptyText && !Ext.isEmpty(obj)) {
                                        inputEl.removeCls(this.emptyCls);
                                        this.valueContainsPlaceholder = false;
                                    }
                                }
                            },
                            reset: function() {
                                this.fromDate = null;
                                this.toDate = null;

                                this.setRawValue('');
                            },
                            pickerClassName: 'SIS.view.DateRangeSelectorForm',
                            isTriggerField: true,
                            flex: 1,
                            itemId: 'trgDate',
                            clearCls: 'x-form-clear-trigger',
                            emptyText: 'თარიღი',
                            enableKeyEvents: true,
                            selectOnFocus: true,
                            editable: false,
                            triggerCls: 'x-form-date-trigger',
                            listeners: {
                                afterrender: {
                                    fn: me.onTrgDateAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'bntSearch',
                            margin: '0 10 0 15',
                            iconCls: 'icon-search',
                            text: '',
                            tooltip: 'ძებნა',
                            listeners: {
                                click: {
                                    fn: me.onBntSearchClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnClear',
                            iconCls: 'icon-clear',
                            text: '',
                            tooltip: 'გასუფთავება',
                            listeners: {
                                click: {
                                    fn: me.onBtnClearClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    storeClassName: 'SIS.store.AllDetailStore',
                    flex: 1,
                    itemId: 'grdOutputDetails',
                    margin: '10 10 10 10',
                    title: '',
                    store: 'AllDetailStore',
                    viewConfig: {
                        getRowClass: function(record, rowIndex, rowParams, store) {
                            return 'other-row';
                        },
                        stripeRows: false
                    },
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            storeClassName: 'SIS.store.AllDetailStore',
                            dock: 'bottom',
                            width: 360,
                            afterPageText: '{0}-დან',
                            beforePageText: 'გვერდი',
                            displayInfo: true,
                            displayMsg: 'ნაჩვენებია {0} - {1} სულ  {2}',
                            emptyMsg: 'მონაცემები არ არის',
                            firstText: 'პირველი გვერდი',
                            lastText: 'ბოლო გვერდი',
                            nextText: 'შემდეგი გვერდი',
                            prevText: 'წინა გვერდი',
                            refreshText: 'განახლება',
                            store: 'AllDetailStore'
                        }
                    ],
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ProductName',
                            text: 'დასახელება',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'OutputAmount',
                            text: 'გაყიდული რაოდენობა',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'SizeUnitName',
                            text: 'ზომის ერთეული',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.get('OutputPrice') + ' ლარი';
                            },
                            dataIndex: 'OutputPrice',
                            text: 'გასაყიდი ფასი',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.get('OutputPrice') * record.get('OutputAmount') + ' ლარი';
                            },
                            dataIndex: 'OutputPrice',
                            text: 'ღირებულება',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'CustomerName',
                            text: 'მყიდველი',
                            flex: 1
                        },
                        {
                            xtype: 'datecolumn',
                            dataIndex: 'Date',
                            text: 'თარიღი',
                            flex: 1,
                            format: 'd.m.Y'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onTrgDateAfterRender: function(component, eOpts) {
        var beforeStr = component.beforeValueText || component.emptyText || '';
        var dateToday = new Date();
        var dateRange = Ext.create('SIS.model.DateRangeSelectModel');
        dateRange.set('FromDate', dateToday);
        dateRange.set('ToDate', dateToday);

        var obj = {
            beforeStr: beforeStr,
            formDate: dateRange.get('FromDate', dateToday),
            toDate: dateRange.get('ToDate', dateToday)
        };

        component.fromDate = dateToday;
        component.toDate = dateToday;

        var beforeStr = obj.beforeStr;

        if(obj.beforeStr === undefined){
            beforeStr = component.beforeValueText || component.emptyText || '';
        }

        component.setRawValue(beforeStr+': '+DateFormat(dateToday) + ' '+DateFormat(dateToday));
        inputEl = component.inputEl;
        if (inputEl && component.emptyText && !Ext.isEmpty(obj)) {
            inputEl.removeCls(component.emptyCls);
            component.valueContainsPlaceholder = false;
        }

        var form = this;

        var grdOutputDetails = FindControl(form, 'grdOutputDetails');

        grdOutputDetails.getStore().clearExtraParams();
        grdOutputDetails.getStore().removeAll();
        grdOutputDetails.getStore().addExtraParams({
            filter: {
                Date: component.getValue(),
                IO: 'gayidva'
            }
        });

        grdOutputDetails.getStore().loadPage(1);
    },

    onBntSearchClick: function(button, e, eOpts) {
        var form = button.up('outputproducts');

        var grdOutputDetails = FindControl(form, 'grdOutputDetails');
        var cmbProducts = FindControl(form, 'cmbProducts');
        var cmbCustomers = FindControl(form, 'cmbCustomers');
        var trgDate = FindControl(form, 'trgDate');

        grdOutputDetails.getStore().clearExtraParams();
        grdOutputDetails.getStore().removeAll();
        grdOutputDetails.getStore().addExtraParams({
            filter: {
                ProductID: cmbProducts.getValue() || null,
                CustomerID: cmbCustomers.getValue() || null,
                Date: trgDate.getValue() || null,
                IO: "gayidva"
            }
        });

        grdOutputDetails.getStore().loadPage(1);
    },

    onBtnClearClick: function(button, e, eOpts) {
        var form = button.up('outputproducts');

        var grdOutputDetails = FindControl(form, 'grdOutputDetails');
        var cmbProducts = FindControl(form, 'cmbProducts');
        var cmbCustomers = FindControl(form, 'cmbCustomers');
        var trgDate = FindControl(form, 'trgDate');

        cmbProducts.reset();
        cmbCustomers.reset();
        trgDate.reset();

        grdOutputDetails.getStore().clearExtraParams();
        grdOutputDetails.getStore().removeAll();
    }

});