/*
 * File: app/view/AddCustomer.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIS.view.AddCustomer', {
    extend: 'Ext.window.Window',
    alias: 'widget.addcustomer',

    requires: [
        'Ext.form.field.Text',
        'Ext.form.field.Checkbox',
        'Ext.container.Container',
        'Ext.button.Button'
    ],

    height: 260,
    width: 570,
    iconCls: 'icon-add',
    title: 'მყიდველის დამატება',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            keyMapConfig: {
                bindings: [
                    {
                        ctrl: false,
                        key: Ext.EventObject.ENTER,
                        btnItemId: 'btnSave'
                    }
                ]
            },
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'textfield',
                    itemId: 'txtName',
                    margin: '10 10 10 10',
                    fieldLabel: 'დასახელება',
                    labelWidth: 180,
                    allowBlank: false,
                    selectOnFocus: true
                },
                {
                    xtype: 'textfield',
                    itemId: 'txtCode',
                    margin: '0 10 10 10',
                    fieldLabel: 'საიდენტიფიკაციო ნომერი',
                    labelWidth: 180,
                    allowBlank: false,
                    selectOnFocus: true
                },
                {
                    xtype: 'textfield',
                    itemId: 'txtAddress',
                    margin: '0 10 10 10',
                    fieldLabel: 'მისამართი',
                    labelWidth: 180,
                    allowBlank: false,
                    selectOnFocus: true
                },
                {
                    xtype: 'checkboxfield',
                    itemId: 'chckDeleted',
                    margin: '0 10 10 195',
                    fieldLabel: '',
                    boxLabel: 'გაუქმება'
                },
                {
                    xtype: 'container',
                    margin: '30 10 10 10',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'container',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnSave',
                            margin: '0 10 0 0',
                            iconCls: 'icon-save24',
                            scale: 'medium',
                            text: '',
                            tooltip: 'შენახვა',
                            listeners: {
                                click: {
                                    fn: me.onBtnSaveClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnClose',
                            iconCls: 'icon-close24',
                            scale: 'medium',
                            text: '',
                            tooltip: 'გაუქმება',
                            listeners: {
                                click: {
                                    fn: me.onBtnCloseClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onBtnSaveClick: function(button, e, eOpts) {
        var form = button.up('addcustomer');

        if(form.validate())
        {
            if(Ext.isFunction(form.save))
            {
                var result = form.save(form.getRecord());

                form.suspendEvents();
                form.close();
            }
        }
    },

    onBtnCloseClick: function(button, e, eOpts) {
        var form = button.up('addcustomer');

        form.close();
    },

    validate: function() {
        var form = this;
        var txtName = FindControl(form, 'txtName');
        var txtCode = FindControl(form, 'txtCode');
        var txtAddress = FindControl(form, 'txtAddress');

        var valid = true;

        valid = valid && txtName.validate();
        valid = valid && txtCode.validate();
        valid = valid && txtAddress.validate();

        return valid;
    },

    setRecord: function() {
        var form = this;
        var txtName = FindControl(form, 'txtName');
        var txtCode = FindControl(form, 'txtCode');
        var txtAddress = FindControl(form, 'txtAddress');
        var chckDeleted = FindControl(form, 'chckDeleted');

        var model = form.formModel;

        if(IsNullOrEmpty(model))
        {
            form.formModel = Ext.create('SIS.model.CustomerModel');
        }
        else
        {
            txtName.setValue(model.get('Name'));
            txtCode.setValue(model.get('Code'));
            txtAddress.setValue(model.get('Address'));
            chckDeleted.setValue(model.get('Deleted'));
        }
    },

    getRecord: function() {
        var form = this;
        var txtName = FindControl(form, 'txtName');
        var txtCode = FindControl(form, 'txtCode');
        var txtAddress = FindControl(form, 'txtAddress');
        var chckDeleted = FindControl(form, 'chckDeleted');

        var model = form.formModel;

        model.set('Name', txtName.getValue());
        model.set('Code', txtCode.getValue());
        model.set('Address', txtAddress.getValue());
        model.set('Deleted', chckDeleted.getValue());

        return model;
    }

});