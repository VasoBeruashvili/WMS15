/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides


//Ext.Ajax.disableCaching = false;
Ext.Loader.config.disableCaching = false;


Ext.Loader.setConfig({
    enabled: true,
    disableCaching: false,
    paths: {
        'SIS': '/Scripts/SIS'
    }
});


Ext.application({
    appFolder: '/Scripts/SIS/app',
    models: [
       // 'DictionaryModel',
       // 'StudentModel',
       // 'ProgramTypeModel',
       // 'DateRangeSelectModel',
       // 'SemesterTypeModel',
       // 'StudyLanguageModel',
       // 'CourseComponentModel',
       // 'ProgramManagerConfigModel',
       // 'ProgramCourseConfigModel',
       // 'ProgramCourseComponentConfigModel',
       // 'CourseTypeModel',
       // 'ProgramDepartmentConfigModel',
       // 'ProgramGeneralConfigModel',
       // 'ProgramFacultyConfigModel',
       // 'ProgramConfigStatusModel',
       // 'StatusTypeValueModel',
       // 'UsersMainPanelModel',
       // //'ProgramConfigCourseModel',
       // //'ProgramConfigWeekModel',
       // //'ProgramConfigExcerciseModel'
       // //'ProgramConfigModel',
       // //'ProgramCourseConfigModel',
       //// 'ProgramCourseComponentConfigModel'
       // //'ProgramConfigCourseModel',//
       // //'ProgramConfigWeekModel',//
       // //'ProgramConfigExcerciseModel'//
       // 'GroupActionsTreeModel',
       // 'GroupsActionModel'
    ],
    stores: [
        //'DictionaryValueStore',
        //'MyStudentStore',
        'MyTreeStore',
        //'ProgramTypeStore',
        //'SemTypesStore',
        //'StudyComponentStore',
        //'ProgramStore',
        //'ProgramTypeAssocStore',
        //'ProgramTemplateStore',
        //'ProgramConfigStore',
        //'ProgramConfigCourseStore',
        //'ProgramCourseComponentConfigStore',
        //'ProgramConfigStatusStore',
        //'UsersMainPanelStore',
        //'GroupActionsTreeStore',
        //'ConfMenuItemsTreeStore'

    ],
    views: [
        //'DateRangeSelector',
        //'DateRangeSelector1',
        //'ProgramConfig',
        //'ProgramTemplateAddSemester',
        //'ProgramTemplateStructuralBlockAdd',
        //'AddProgramTemplatePanel',
        //'SearchPanel',
        //'DateRangeSelector2',
        //'CourseSearch',
        //'DateRangeSelectorForm',
        //'ProgramSearch',
        //'CommonConfig',
        //'AddProgramTemplate',
        //'AddProgramTemplatePanel',
        //'AddModule',
        //'AddProgramType',
        //'AddCourseComponent',
        //'EditAtribute',
        //'AddAttribute',
        //'AssignCourseOwner',
        //'ProgramConfig',
        'MyViewport',
        //'ProgramDepConfig',
        //'ProgramSearchDep',
        //'ProgramSearchDepHead',
        //'ProgramDepConfigPanel',
        //'ProgramConfigFacPanel',
        //'ProgramInfoCommon',
        //'UsersMainPanel',
        //'GroupActionsMainPanel'
    ],
    controllers: [
        'TreeController',
        //'RegistryEmployeeSearchController',
        //'ProgramCourseController',
        //'ProgramTemplatePanelController',
        //'RegistryStudentSearchController',
        //'MainController',
        //'AddAttributeWindowController',
        //'ProgramSearcController',
        //'CourseSearcController',
        //'AddModuleWindowController',
        //'ProgramConfigController',
        //'ProgramConfigurationController',
        //'ProgramController',
        //'CourseController',
        //'SemesterTypeController',
        //'ProgramInformationController',
        //'OrganizationalUnitsController',
        //'ProgramManagerConfigController',
        //'UsersMainPanelController'
    ],
    name: 'SIS',
    launch: function () {




        window.localStorage.setItem('login', true);

        var loginchnage = function storageChange(event) {
            if (event.key == 'login' || event.key == 'userid') {
                window.location.reload();
            }
        }





        Ext.Msg.msg.anchor = '100%';
        //delete Ext.tip.Tip.prototype.minWidth;

        Request(
            '/Home/LoadUser',
            {},
            function (response) {
                var res = Ext.JSON.decode(response);

                var CurrentUser = res.root;

                Ext.create('SIS.view.MyViewport', {
                    CurrentUser: CurrentUser
                });


                //TODO change

                var userInfo = CurrentUser.FirstName + ' ' + CurrentUser.LastName + ', ' + CurrentUser.Position + '&nbsp; &nbsp; &nbsp; ';

                window.localStorage.setItem('userid', CurrentUser.ID);

                window.addEventListener('storage', loginchnage, false);


                var departmentName = CurrentUser.DepartmentName;
                var user = CurrentUser.Position + ': ' + CurrentUser.FirstName + ' ' + CurrentUser.LastName;

                Ext.get('department').update(departmentName);

                Ext.get('user').update(user);

                //Ext.get('UserInfo').update(userInfo);

                // -- INIT CLOCK
                init(YEAR, MONTH, DAY, WDAY, HOUR, MINUTE, SECOND, 'sel', 'sel', 'sel');
            }
        );

        //Ext.create('SIS.view.MyViewport');


        Ext.EventManager.on(window, 'keydown', function (e, t) {
            if (e.getKey() == e.BACKSPACE && (!/^(input|textarea)$/i.test(t.tagName) || t.disabled || t.readOnly)) {
                e.stopEvent();
            }
        });


        var map = new Ext.util.KeyMap({
            target: Ext.getBody(),
            binding: [
                //ctrl - s
                {
                    ctrl: true,
                    key: [Ext.EventObject.S, Ext.EventObject.R],
                    fn: function () {
                        return false;
                    },
                    defaultEventAction: 'stopEvent'
                }]
        });

        //Ext.QuickTips.init();

        //Ext.QuickTips.enable();

        //Ext.ComponentQuery.query('mytreepanel')[0].getStore().load();
    }

});
