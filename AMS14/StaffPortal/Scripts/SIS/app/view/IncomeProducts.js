/*
 * File: app/view/IncomeProducts.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIS.view.IncomeProducts', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.incomeproducts',

    requires: [
        'Ext.form.FieldSet',
        'Ext.form.field.ComboBox',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Action'
    ],

    border: false,
    height: 465,
    width: 970,
    title: '',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            keyMapConfig: {
                bindings: [
                    {
                        ctrl: false,
                        key: Ext.EventObject.ENTER,
                        btnItemId: 'btnSave'
                    }
                ]
            },
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'container',
                    margin: '5 10 0 10',
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'fieldset',
                            margin: '0 0 0 0',
                            collapsible: true,
                            title: 'მომწოდებელი',
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    layout: {
                                        type: 'vbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            storeClassName: 'SIS.store.ActiveDistributorStore',
                                            flex: 1,
                                            itemId: 'cmbDistributors',
                                            margin: '0 0 10 0',
                                            fieldLabel: 'მომწოდებელი',
                                            allowBlank: false,
                                            selectOnFocus: true,
                                            triggerCls: 'x-form-search-trigger',
                                            displayField: 'Name',
                                            minChars: 1,
                                            store: 'ActiveDistributorStore',
                                            typeAhead: true,
                                            valueField: 'ID',
                                            listeners: {
                                                select: {
                                                    fn: me.onCmbDistributorsSelect,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            flex: 1,
                                            disabled: true,
                                            itemId: 'txtCode',
                                            margin: '0 0 0 0',
                                            fieldLabel: 'კოდი',
                                            readOnly: true,
                                            allowBlank: false,
                                            selectOnFocus: true
                                        },
                                        {
                                            xtype: 'textfield',
                                            flex: 1,
                                            disabled: true,
                                            itemId: 'txtAddress',
                                            margin: '10 0 10 0',
                                            fieldLabel: 'მისამართი',
                                            readOnly: true,
                                            allowBlank: false,
                                            selectOnFocus: true
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            flex: 1,
                            hidden: true,
                            itemId: 'fsProducts',
                            margin: '0 0 0 0',
                            collapsible: true,
                            title: 'საქონელი',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    flex: 1,
                                    margin: '-5 0 5 0',
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'container',
                                            flex: 1,
                                            margin: '0 10 0 0',
                                            layout: {
                                                type: 'vbox',
                                                align: 'stretch'
                                            },
                                            items: [
                                                {
                                                    xtype: 'combobox',
                                                    storeClassName: 'SIS.store.ActiveProductStore',
                                                    tpl: '<tpl for="."><div class="x-boundlist-item" >{Name} <span style="color: red"><b>{CurrentAmount}</b></span> <b>{SizeUnitName} <b><span style="color: green">{InputPrice}</span> ლარი</b></b></div></tpl>',
                                                    itemId: 'cmbProducts',
                                                    margin: '5 0 5 0',
                                                    fieldLabel: 'დასახელება',
                                                    allowBlank: false,
                                                    selectOnFocus: true,
                                                    triggerCls: 'x-form-search-trigger',
                                                    displayField: 'Name',
                                                    minChars: 1,
                                                    store: 'ActiveProductStore',
                                                    typeAhead: true,
                                                    valueField: 'ID',
                                                    listeners: {
                                                        select: {
                                                            fn: me.onCmbProductsSelect,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'textfield',
                                                    disabled: true,
                                                    itemId: 'txtSizeUnit',
                                                    margin: '5 0 5 0',
                                                    fieldLabel: 'ერთეული',
                                                    readOnly: true,
                                                    allowBlank: false,
                                                    selectOnFocus: true
                                                },
                                                {
                                                    xtype: 'textfield',
                                                    disabled: true,
                                                    itemId: 'txtAmount',
                                                    margin: '5 0 5 0',
                                                    fieldLabel: 'რაოდენობა',
                                                    allowBlank: false,
                                                    selectOnFocus: true,
                                                    listeners: {
                                                        change: {
                                                            fn: me.onTxtAmountChange,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'container',
                                            flex: 1,
                                            layout: {
                                                type: 'vbox',
                                                align: 'stretch'
                                            },
                                            items: [
                                                {
                                                    xtype: 'textfield',
                                                    disabled: true,
                                                    itemId: 'txtInputPrice',
                                                    margin: '5 0 5 0',
                                                    fieldLabel: 'მიღების ფასი',
                                                    allowBlank: false,
                                                    selectOnFocus: true,
                                                    listeners: {
                                                        change: {
                                                            fn: me.onTxtInputPriceChange,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'textfield',
                                                    disabled: true,
                                                    itemId: 'txtOutputPrice',
                                                    margin: '5 0 5 0',
                                                    fieldLabel: 'რეალიზ. ფასი',
                                                    allowBlank: false,
                                                    selectOnFocus: true,
                                                    listeners: {
                                                        change: {
                                                            fn: me.onTxtOutputPriceChange,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'textfield',
                                                    disabled: true,
                                                    itemId: 'txtTotalPrice',
                                                    margin: '5 0 5 0',
                                                    fieldLabel: 'ღირებულება',
                                                    readOnly: true,
                                                    allowBlank: false,
                                                    selectOnFocus: true
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'container',
                                    layout: {
                                        type: 'vbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'container',
                                            flex: 1
                                        },
                                        {
                                            xtype: 'container',
                                            flex: 1,
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    itemId: 'btnSave',
                                                    margin: '12 0 10 10',
                                                    iconCls: 'icon-save24',
                                                    scale: 'medium',
                                                    text: '',
                                                    tooltip: 'შენახვა',
                                                    listeners: {
                                                        click: {
                                                            fn: me.onBtnSaveClick,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    storeClassName: 'SIS.store.IncomeProductArrayStore',
                    flex: 1,
                    itemId: 'grdIncomeProducts',
                    margin: '10 10 0 10',
                    title: '',
                    store: 'IncomeProductArrayStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'Name',
                            text: 'დასახელება',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'Amount',
                            text: 'რაოდენობა',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'SizeUnitName',
                            text: 'ერთეული',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.get('InputPrice') + ' ლარი';
                            },
                            dataIndex: 'InputPrice',
                            text: 'მიღების ფასი',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.get('OutputPrice') + ' ლარი';
                            },
                            dataIndex: 'OutputPrice',
                            text: 'რეალიზ. ფასი',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.get('TotalPrice') + ' ლარი';
                            },
                            dataIndex: 'TotalPrice',
                            text: 'ღირებულება',
                            flex: 1
                        },
                        {
                            xtype: 'actioncolumn',
                            width: 24,
                            items: [
                                {
                                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                        var grdIncomeProducts = this.up('grid');

                                        var form = grdIncomeProducts.up('incomeproducts');
                                        var cmbProducts = FindControl(form, 'cmbProducts');
                                        var txtAmount = FindControl(form, 'txtAmount');
                                        var txtTotalPrice = FindControl(form, 'txtTotalPrice');

                                        var detailModel = Ext.create('SIS.model.DetailModel');
                                        SetDelete(detailModel);
                                        detailModel.set('OperationID', record.get('OperationID'));

                                        var data = ModelToJson(detailModel);

                                        Request(
                                        '/Home/SaveDetail',
                                        data,
                                        function(response){
                                            var productID = record.get('ProductID');
                                            Request(
                                            '/Home/GetProductByID',
                                            {productID: productID},
                                            function(response1){
                                                var productModel = CreateModel(response1, 'SIS.model.ProductModel');

                                                productModel.set('CurrentAmount', record.get('Amount'));
                                                productModel.set('TotalPrice', record.get('Amount') * record.get('OutputPrice'));
                                                productModel.set('RealPrice', record.get('Amount') * record.get('InputPrice'));
                                                productModel.set('ToChangeDown', true);

                                                var data2 = ModelToJson(productModel);
                                                Request(
                                                '/Home/SaveProduct',
                                                data2,
                                                function(response2){
                                                    grdIncomeProducts.getStore().remove(record);
                                                    cmbProducts.getStore().load();

                                                    var txtTotalPriceSum = FindControl(form, 'txtTotalPriceSum');

                                                    var totalPriceSum = grdIncomeProducts.getStore().sum('TotalPrice');

                                                    txtTotalPriceSum.setValue('ჯამი: ' + totalPriceSum + ' ლარი');
                                                }
                                                );
                                            }
                                            );
                                        }
                                        );
                                    },
                                    iconCls: 'icon-delete',
                                    tooltip: 'წაშლა'
                                }
                            ]
                        }
                    ],
                    viewConfig: {
                        getRowClass: function(record, rowIndex, rowParams, store) {
                            return 'normal-row';
                        }
                    }
                },
                {
                    xtype: 'container',
                    margin: '10 10 10 10',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'container',
                            height: 32
                        },
                        {
                            xtype: 'container',
                            flex: 1
                        },
                        {
                            xtype: 'container',
                            flex: 1
                        },
                        {
                            xtype: 'container',
                            flex: 1
                        },
                        {
                            xtype: 'container',
                            flex: 1
                        },
                        {
                            xtype: 'container',
                            flex: 1
                        },
                        {
                            xtype: 'textfield',
                            flex: 0.95,
                            itemId: 'txtTotalPriceSum',
                            fieldLabel: '',
                            fieldStyle: 'font-weight: bold; color: red; border: 1px solid gray;',
                            readOnly: true,
                            emptyText: 'ჯამი:'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onCmbDistributorsSelect: function(combo, records, eOpts) {
        var form = this;

        var txtCode = FindControl(form, 'txtCode');
        var txtAddress = FindControl(form, 'txtAddress');

        var fsProducts = FindControl(form, 'fsProducts');

        var record = combo.getSelectedRecord();

        if(!IsNullOrEmpty(record))
        {
            txtCode.setDisabled(false);
            txtAddress.setDisabled(false);

            txtCode.setValue(record.get('Code'));
            txtAddress.setValue(record.get('Address'));

            var txtAmount = FindControl(form, 'txtAmount');
            var txtInputPrice = FindControl(form, 'txtInputPrice');
            var txtOutputPrice = FindControl(form, 'txtOutputPrice');
            var txtTotalPrice = FindControl(form, 'txtTotalPrice');

            txtAmount.regex = new RegExp('^[+-]?[0-9]+?$');
            txtInputPrice.regex = new RegExp('^[+-]?[0-9]+(.[0-9]+)?$');
            txtOutputPrice.regex = new RegExp('^[+-]?[0-9]+(.[0-9]+)?$');
            txtTotalPrice.regex = new RegExp('^[+-]?[0-9]+(.[0-9]+)?$');

            fsProducts.setVisible(true);
        }
    },

    onCmbProductsSelect: function(combo, records, eOpts) {
        var form = this;

        var txtSizeUnit = FindControl(form, 'txtSizeUnit');

        var record = combo.getSelectedRecord();

        if(!IsNullOrEmpty(record))
        {
            var txtAmount = FindControl(form, 'txtAmount');
            var txtInputPrice = FindControl(form, 'txtInputPrice');
            var txtOutputPrice = FindControl(form, 'txtOutputPrice');
            var txtTotalPrice = FindControl(form, 'txtTotalPrice');

            txtSizeUnit.setDisabled(false);
            txtAmount.setDisabled(false);
            txtInputPrice.setDisabled(false);
            txtOutputPrice.setDisabled(false);
            txtTotalPrice.setDisabled(false);

            txtSizeUnit.setValue(record.get('SizeUnitName'));
        }
    },

    onTxtAmountChange: function(field, newValue, oldValue, eOpts) {
        var form = this;

        var txtTotalPrice = FindControl(form, 'txtTotalPrice');
        var txtInputPrice = FindControl(form, 'txtInputPrice');

        if(txtInputPrice.getValue() !== null){
            var val = txtInputPrice.getValue() * field.getValue();

            txtTotalPrice.setValue(val);
        }
    },

    onTxtInputPriceChange: function(field, newValue, oldValue, eOpts) {
        var form = this;

        var txtTotalPrice = FindControl(form, 'txtTotalPrice');
        var txtAmount = FindControl(form, 'txtAmount');

        var str = field.getValue().replace(',', '.');
        field.setValue(str);

        if(txtAmount.getValue() !== null){
            var val = txtAmount.getValue() * field.getValue();

            txtTotalPrice.setValue(val);
        }
    },

    onTxtOutputPriceChange: function(field, newValue, oldValue, eOpts) {
        var str = field.getValue().replace(',', '.');
        field.setValue(str);
    },

    onBtnSaveClick: function(button, e, eOpts) {
        var form = this;

        var cmbDistributors = FindControl(form, 'cmbDistributors');
        var cmbProducts = FindControl(form, 'cmbProducts');
        var txtAmount = FindControl(form, 'txtAmount');
        var txtInputPrice = FindControl(form, 'txtInputPrice');
        var txtOutputPrice = FindControl(form, 'txtOutputPrice');
        var txtSizeUnit = FindControl(form, 'txtSizeUnit');
        var txtTotalPrice = FindControl(form, 'txtTotalPrice');

        if(form.validate()){
            var operationModel = Ext.create('SIS.model.OperationModel');
            operationModel.set('IO', 'miReba');
            operationModel.set('DistributorID', cmbDistributors.getValue());

            var data = ModelToJson(operationModel);
            Request(
                '/Home/SaveOperation',
                data,
                function(response){
                    var responseOperationModel = CreateModel(response, 'SIS.model.OperationModel');

                    var detailModel = Ext.create('SIS.model.DetailModel');
                    detailModel.set('OperationID', responseOperationModel.get('ID'));
                    detailModel.set('ProductID', cmbProducts.getValue());
                    detailModel.set('InputAmount', txtAmount.getValue());
                    detailModel.set('InputPrice', txtInputPrice.getValue());
                    detailModel.set('OutputPrice', txtOutputPrice.getValue());
                    detailModel.set('SizeUnitID', cmbProducts.getSelectedRecord().get('SizeUnitID'));

                    var data1 = ModelToJson(detailModel);

                    Request(
                        '/Home/SaveDetail',
                        data1,
                        function(response1){
                            var productModel = cmbProducts.getSelectedRecord();

                            productModel.set('CurrentAmount', txtAmount.getValue());
                            productModel.set('TotalPrice', txtAmount.getValue() * txtOutputPrice.getValue());
                            productModel.set('RealPrice', txtAmount.getValue() * txtInputPrice.getValue());
                            productModel.set('ToChange', true);
                            productModel.set('InputPrice', txtInputPrice.getValue());
                            productModel.set('OutputPrice', txtOutputPrice.getValue());

                            var data2 = ModelToJson(productModel);
                            Request(
                                '/Home/SaveProduct',
                                data2,
                                function(response2){
                                    form.getRecord(responseOperationModel.get('ID'));
                                    form.resetForm();
                                    cmbProducts.getStore().load();
                                }
                            );
                        }
                    );
                }
            );
        }
    },

    getRecord: function(operationID) {
        var form = this;

        var cmbProducts = FindControl(form, 'cmbProducts');
        var txtSizeUnit = FindControl(form, 'txtSizeUnit');
        var txtAmount = FindControl(form, 'txtAmount');
        var txtInputPrice = FindControl(form, 'txtInputPrice');
        var txtOutputPrice = FindControl(form, 'txtOutputPrice');
        var txtTotalPrice = FindControl(form, 'txtTotalPrice');

        var grdIncomeProducts = FindControl(form, 'grdIncomeProducts');

        var model = Ext.create('SIS.model.IncomeProductModel');

        model.set('Name', cmbProducts.getSelectedRecord().get('Name'));
        model.set('Amount', txtAmount.getValue());
        model.set('SizeUnitName', cmbProducts.getSelectedRecord().get('SizeUnitName'));
        model.set('InputPrice', txtInputPrice.getValue());
        model.set('OutputPrice', txtOutputPrice.getValue());
        model.set('TotalPrice', txtTotalPrice.getValue());
        model.set('OperationID', operationID);
        model.set('ProductID', cmbProducts.getValue());

        grdIncomeProducts.getStore().add(model);

        var txtTotalPriceSum = FindControl(form, 'txtTotalPriceSum');

        var totalPriceSum = grdIncomeProducts.getStore().sum('TotalPrice');

        txtTotalPriceSum.setValue('ჯამი: ' + totalPriceSum + ' ლარი');
    },

    resetForm: function() {
        var form = this;

        var cmbProducts = FindControl(form, 'cmbProducts');
        var txtSizeUnit = FindControl(form, 'txtSizeUnit');
        var txtAmount = FindControl(form, 'txtAmount');
        var txtInputPrice = FindControl(form, 'txtInputPrice');
        var txtOutputPrice = FindControl(form, 'txtOutputPrice');
        var txtTotalPrice = FindControl(form, 'txtTotalPrice');

        cmbProducts.reset();
        txtSizeUnit.reset();
        txtAmount.reset();
        txtInputPrice.reset();
        txtOutputPrice.reset();
        txtTotalPrice.reset();
    },

    validate: function() {
        var form = this;

        var cmbDistributors = FindControl(form, 'cmbDistributors');
        var txtCode = FindControl(form, 'txtCode');
        var txtAddress = FindControl(form, 'txtAddress');

        var cmbProducts = FindControl(form, 'cmbProducts');
        var txtSizeUnit = FindControl(form, 'txtSizeUnit');
        var txtAmount = FindControl(form, 'txtAmount');
        var txtInputPrice = FindControl(form, 'txtInputPrice');
        var txtOutputPrice = FindControl(form, 'txtOutputPrice');
        var txtTotalPrice = FindControl(form, 'txtTotalPrice');

        var valid = true;

        valid = valid && cmbDistributors.validate();
        valid = valid && txtCode.validate();
        valid = valid && txtAddress.validate();
        valid = valid && cmbProducts.validate();
        valid = valid && txtSizeUnit.validate();
        valid = valid && txtAmount.validate();
        valid = valid && txtInputPrice.validate();
        valid = valid && txtOutputPrice.validate();
        valid = valid && txtTotalPrice.validate();

        if(valid){
            if(txtInputPrice.getValue() >= txtOutputPrice.getValue()){
                valid = false;
                MessageBox('', 'მიღების ფასი ნაკლები უნდა იყოს რეალიზაციის ფასზე!');
            }else{
                valid = true;
            }
        }

        return valid;
    }

});