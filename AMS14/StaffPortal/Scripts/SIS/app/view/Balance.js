/*
 * File: app/view/Balance.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIS.view.Balance', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.balance',

    requires: [
        'Ext.button.Button',
        'Ext.form.field.ComboBox',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Date'
    ],

    border: false,
    height: 599,
    width: 746,
    iconCls: '',
    title: '',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            keyMapConfig: {
                bindings: [
                    {
                        ctrl: false,
                        key: Ext.EventObject.ENTER,
                        btnItemId: 'btnSearch'
                    },
                    {
                        ctrl: false,
                        key: Ext.EventObject.ESC,
                        btnItemId: 'btnClear'
                    }
                ]
            },
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'container',
                    margin: '10 10 0 10',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'btnWorkEnd',
                            margin: '0 15 0 0',
                            iconCls: 'refresh16',
                            text: '',
                            tooltip: 'ნაშთის გენერაცია',
                            listeners: {
                                click: {
                                    fn: me.onBtnWorkEndClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'container',
                            flex: 1,
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    storeClassName: 'SIS.store.AllProductStore',
                                    flex: 1,
                                    itemId: 'cmbName',
                                    margin: '0 10 0 0',
                                    clearCls: 'x-form-clear-trigger',
                                    emptyText: 'დასახელება',
                                    enableKeyEvents: true,
                                    selectOnFocus: true,
                                    triggerCls: 'x-form-search-trigger',
                                    displayField: 'Name',
                                    minChars: 1,
                                    store: 'AllProductStore',
                                    typeAhead: true,
                                    valueField: 'ID',
                                    listeners: {
                                        change: {
                                            fn: me.onTxtNameChange1,
                                            scope: me
                                        },
                                        select: {
                                            fn: me.onCmbNameSelect1,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'triggerfield',
                                    onTriggerClick: function() {
                                        var me = this;
                                        var beforeStr = this.beforeValueText || this.emptyText || '';

                                        var win = Ext.create(this.pickerClassName, {
                                            modal:true,
                                            save: function(rangeModel){
                                                var obj = {
                                                    beforeStr: beforeStr,
                                                    fromDate: rangeModel.get('FromDate'),
                                                    toDate: rangeModel.get('ToDate')
                                                };

                                                me.setValue(obj);

                                                return EnumDialogResult.Success;
                                            }
                                        });

                                        win.setData();
                                        win.show();
                                    },
                                    getValue: function() {
                                        var obj = !(this.fromDate && this.toDate) ? null : {
                                            FromDate: this.fromDate,
                                            ToDate: this.toDate
                                        };

                                        return obj;
                                    },
                                    setValue: function(obj) {
                                        if(!IsNullOrEmpty(obj)){
                                            var from = obj.fromDate;
                                            var to = obj.toDate;

                                            this.fromDate = from;
                                            this.toDate = to;

                                            var beforeStr = obj.beforeStr;

                                            if(obj.beforeStr === undefined){
                                                beforeStr = this.beforeValueText || this.emptyText || '';
                                            }

                                            this.setRawValue(beforeStr+': '+DateFormat(from) + ' '+DateFormat(to));
                                            inputEl = this.inputEl;
                                            if (inputEl && this.emptyText && !Ext.isEmpty(obj)) {
                                                inputEl.removeCls(this.emptyCls);
                                                this.valueContainsPlaceholder = false;
                                            }
                                        }
                                    },
                                    reset: function() {
                                        this.fromDate = null;
                                        this.toDate = null;

                                        this.setRawValue('');
                                    },
                                    pickerClassName: 'SIS.view.DateRangeSelectorForm',
                                    isTriggerField: true,
                                    flex: 1,
                                    itemId: 'trgDate',
                                    clearCls: 'x-form-clear-trigger',
                                    emptyText: 'თარიღი',
                                    enableKeyEvents: true,
                                    selectOnFocus: true,
                                    editable: false,
                                    triggerCls: 'x-form-date-trigger',
                                    listeners: {
                                        afterrender: {
                                            fn: me.onTrgDateAfterRender,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnSearch',
                                    margin: '0 0 0 15',
                                    iconCls: 'icon-search',
                                    text: '',
                                    tooltip: 'ძებნა',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnSearchClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnClear',
                                    margin: '0 0 0 10',
                                    iconCls: 'icon-clear',
                                    text: '',
                                    tooltip: 'გასუფთავება',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnClearClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    storeClassName: 'SIS.store.AllBalanceStore',
                    flex: 1,
                    itemId: 'grdBalance',
                    margin: '10 10 10 10',
                    title: '',
                    store: 'AllBalanceStore',
                    viewConfig: {
                        getRowClass: function(record, rowIndex, rowParams, store) {
                            return 'other-row';
                        },
                        stripeRows: false
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'Name',
                            text: 'დასახელება',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'CurrentAmount',
                            text: 'ნაშთი',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'SizeUnitName',
                            text: 'ზომის ერთეული',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.get('InputPrice') + ' ლარი';
                            },
                            dataIndex: 'InputPrice',
                            text: 'მიღების ფასი',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.get('OutputPrice') + ' ლარი';
                            },
                            dataIndex: 'OutputPrice',
                            text: 'გასაყიდი ფასი',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.get('RealPrice') + ' ლარი';
                            },
                            dataIndex: 'RealPrice',
                            text: 'მიღებულის ღირებულება',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.get('TotalPrice') + ' ლარი';
                            },
                            dataIndex: 'TotalPrice',
                            text: 'რეალიზებულის ღირებულება',
                            flex: 1
                        },
                        {
                            xtype: 'datecolumn',
                            dataIndex: 'Date',
                            text: 'თარიღი',
                            flex: 1,
                            format: 'd.m.Y'
                        }
                    ]
                },
                {
                    xtype: 'container',
                    margin: '0 10 10 10',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            flex: 0.5,
                            height: 32,
                            itemId: 'txtRealPriceSum',
                            fieldLabel: '',
                            fieldStyle: 'font-weight: bold; color: red; border: 1px solid gray;',
                            readOnly: true,
                            emptyText: 'მიღებულის ჯამი:',
                            listeners: {
                                focus: {
                                    fn: me.onTxtRealPriceSumFocus,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'container',
                            flex: 1
                        },
                        {
                            xtype: 'textfield',
                            flex: 0.5,
                            height: 32,
                            itemId: 'txtTotalPriceSum',
                            fieldLabel: '',
                            fieldStyle: 'font-weight: bold; color: red; border: 1px solid gray;',
                            readOnly: true,
                            emptyText: 'რეალიზებულის ჯამი:',
                            listeners: {
                                focus: {
                                    fn: me.onTxtTotalPriceSumFocus,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onBtnWorkEndClick: function(button, e, eOpts) {
        var model = Ext.create('SIS.model.CustomerModel');
        var data = ModelToJson(model);

        var form = this;
        var grdBalance = FindControl(form, 'grdBalance');

        Request(
            '/Home/WorkEnd',
            data,
            function(response){
                MessageBox('', 'ნაშთის გენერაცია წარმატებით დასრულდა.');
                grdBalance.getStore().load();
            }
        );
    },

    onTxtNameChange1: function(field, newValue, oldValue, eOpts) {
        var form = this;

        var btnClear = FindControl(form, 'btnClear');

        if(!IsNullOrEmpty(field.getSelectedRecord()))
        {
            btnClear.setVisible(true);
        }
    },

    onCmbNameSelect1: function(combo, records, eOpts) {
        var form = this;

        var grdBalance = FindControl(form, 'grdBalance');
        var trgDate = FindControl(form, 'trgDate');
        var txtTotalPriceSum = FindControl(form, 'txtTotalPriceSum');

        if(trgDate.getValue() === null)
        {
            if(trgDate.validate())
            {
                grdBalance.getStore().clearExtraParams();
                grdBalance.getStore().removeAll();
                grdBalance.getStore().addExtraParams({
                    filter: {
                        Name: combo.getSelectedRecord().get('Name')
                    }
                });

                grdBalance.getStore().loadPage(1);
                txtTotalPriceSum.reset();
            }
        }
        else
        {
            if(trgDate.validate())
            {
                grdBalance.getStore().clearExtraParams();
                grdBalance.getStore().removeAll();
                grdBalance.getStore().addExtraParams({
                    filter: {
                        Date: trgDate.getValue(),
                        Name: combo.getSelectedRecord().get('Name')
                    }
                });

                grdBalance.getStore().loadPage(1);
                txtTotalPriceSum.reset();
            }
        }
    },

    onTrgDateAfterRender: function(component, eOpts) {
        var beforeStr = component.beforeValueText || component.emptyText || '';
        var dateToday = new Date();
        var dateRange = Ext.create('SIS.model.DateRangeSelectModel');
        dateRange.set('FromDate', dateToday);
        dateRange.set('ToDate', dateToday);

        var obj = {
            beforeStr: beforeStr,
            formDate: dateRange.get('FromDate', dateToday),
            toDate: dateRange.get('ToDate', dateToday)
        };

        component.fromDate = dateToday;
        component.toDate = dateToday;

        var beforeStr = obj.beforeStr;

        if(obj.beforeStr === undefined){
            beforeStr = component.beforeValueText || component.emptyText || '';
        }

        component.setRawValue(beforeStr+': '+DateFormat(dateToday) + ' '+DateFormat(dateToday));
        inputEl = component.inputEl;
        if (inputEl && component.emptyText && !Ext.isEmpty(obj)) {
            inputEl.removeCls(component.emptyCls);
            component.valueContainsPlaceholder = false;
        }

        var form = this;

        var grdBalance = FindControl(form, 'grdBalance');

        grdBalance.getStore().clearExtraParams();
        grdBalance.getStore().removeAll();
        grdBalance.getStore().addExtraParams({
            filter: {
                Date: component.getValue()
            }
        });

        grdBalance.getStore().load();
    },

    onBtnSearchClick: function(button, e, eOpts) {
        var form = this;

        var trgDate = FindControl(form, 'trgDate');
        var cmbName = FindControl(form, 'cmbName');
        var txtTotalPriceSum = FindControl(form, 'txtTotalPriceSum');
        var txtRealPriceSum = FindControl(form, 'txtRealPriceSum');

        var grdBalance = FindControl(form, 'grdBalance');

        if(IsNullOrEmpty(cmbName.getSelectedRecord()))
        {
        //     if(trgDate.validate())
        //     {
                grdBalance.getStore().clearExtraParams();
                grdBalance.getStore().removeAll();
                grdBalance.getStore().addExtraParams(
                    {
                        filter:{
                            Date: trgDate.getValue()
                        }
                    }
                );

                grdBalance.getStore().loadPage(1);
                txtTotalPriceSum.reset();
                txtRealPriceSum.reset();
        //     }
        }
        else
        {
        //     if(trgDate.validate())
        //     {
                grdBalance.getStore().clearExtraParams();
                grdBalance.getStore().removeAll();
                grdBalance.getStore().addExtraParams(
                    {
                        filter:{
                            Date: trgDate.getValue(),
                            Name: cmbName.getSelectedRecord().get('Name')
                        }
                    }
                );

                grdBalance.getStore().loadPage(1);
                txtTotalPriceSum.reset();
                txtRealPriceSum.reset();
        //     }
        }
    },

    onBtnClearClick: function(button, e, eOpts) {
        var form = this;

        var trgDate = FindControl(form, 'trgDate');
        var cmbName = FindControl(form, 'cmbName');
        var txtTotalPriceSum = FindControl(form, 'txtTotalPriceSum');
        var txtRealPriceSum = FindControl(form, 'txtRealPriceSum');
        trgDate.reset();
        cmbName.reset();
        txtTotalPriceSum.reset();
        txtRealPriceSum.reset();

        // button.setVisible(false);

        var grdBalance = FindControl(form, 'grdBalance');

        grdBalance.getStore().clearExtraParams();
        grdBalance.getStore().removeAll();
        grdBalance.getStore().addExtraParams(
            {
                filter:{
                    Date: ''
                }
            }
        );

        grdBalance.getStore().loadPage(1);
    },

    onTxtRealPriceSumFocus: function(component, e, eOpts) {
        var form = this;

        var grdBalance = FindControl(form, 'grdBalance');

        var totalPriceSum = grdBalance.getStore().sum('RealPrice');

        component.setValue('მიღებულის ჯამი: ' + totalPriceSum + ' ლარი');
    },

    onTxtTotalPriceSumFocus: function(component, e, eOpts) {
        var form = this;

        var grdBalance = FindControl(form, 'grdBalance');

        var totalPriceSum = grdBalance.getStore().sum('TotalPrice');

        component.setValue('რეალიზებულის ჯამი: ' + totalPriceSum + ' ლარი');
    }

});