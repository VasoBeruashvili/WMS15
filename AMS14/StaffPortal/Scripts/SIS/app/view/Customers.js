/*
 * File: app/view/Customers.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIS.view.Customers', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.customers',

    requires: [
        'Ext.button.Button',
        'Ext.form.field.ComboBox',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.toolbar.Paging',
        'Ext.grid.column.Column'
    ],

    border: false,
    height: 599,
    width: 746,
    iconCls: '',
    title: '',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            keyMapConfig: {
                bindings: [
                    {
                        ctrl: false,
                        key: Ext.EventObject.ESC,
                        btnItemId: 'btnClear'
                    }
                ]
            },
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'container',
                    margin: '10 10 0 10',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'btnAdd',
                            margin: '0 10 0 0',
                            iconCls: 'icon-add',
                            text: '',
                            tooltip: 'დამატება',
                            listeners: {
                                click: {
                                    fn: me.onBtnAddClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnEdit',
                            margin: '0 5 0 0',
                            iconCls: 'icon-edit',
                            text: '',
                            tooltip: 'რედაქტირება',
                            listeners: {
                                click: {
                                    fn: me.onBtnEditClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'container',
                            flex: 1.5
                        },
                        {
                            xtype: 'combobox',
                            storeClassName: 'SIS.store.AllCustomerStore',
                            flex: 1,
                            itemId: 'cmbName',
                            clearCls: 'x-form-clear-trigger',
                            emptyText: 'დასახელება',
                            enableKeyEvents: true,
                            selectOnFocus: true,
                            triggerCls: 'x-form-search-trigger',
                            displayField: 'Name',
                            minChars: 1,
                            store: 'AllCustomerStore',
                            typeAhead: true,
                            valueField: 'ID',
                            listeners: {
                                change: {
                                    fn: me.onTxtNameChange,
                                    scope: me
                                },
                                select: {
                                    fn: me.onCmbNameSelect,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onCmbNameAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            hidden: true,
                            itemId: 'btnClear',
                            margin: '0 0 0 15',
                            iconCls: 'icon-clear',
                            text: '',
                            tooltip: 'გასუფთავება',
                            listeners: {
                                click: {
                                    fn: me.onBtnClearClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    storeClassName: 'SIS.store.AllCustomerStore',
                    flex: 1,
                    itemId: 'grdCustomers',
                    margin: '10 10 10 10',
                    title: '',
                    store: 'AllCustomerStore',
                    viewConfig: {
                        getRowClass: function(record, rowIndex, rowParams, store) {
                            return record.get('Deleted') === true ? 'deleted-row' : 'normal-row';
                        },
                        stripeRows: false
                    },
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            storeClassName: 'SIS.store.AllCustomerStore',
                            dock: 'bottom',
                            width: 360,
                            afterPageText: '{0}-დან',
                            beforePageText: 'გვერდი',
                            displayInfo: true,
                            displayMsg: 'ნაჩვენებია {0} - {1} სულ  {2}',
                            emptyMsg: 'მონაცემები არ არის',
                            firstText: 'პირველი გვერდი',
                            lastText: 'ბოლო გვერდი',
                            nextText: 'შემდეგი გვერდი',
                            prevText: 'წინა გვერდი',
                            refreshText: 'განახლება',
                            store: 'AllCustomerStore'
                        }
                    ],
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'Name',
                            text: 'დასახელება',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'Code',
                            text: 'საიდენტიფიკაციო ნომერი',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'Address',
                            text: 'მისამართი',
                            flex: 1
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onBtnAddClick: function(button, e, eOpts) {
        var form = button.up('customers');
        var grdCustomers = FindControl(form, 'grdCustomers');
        var record = Ext.create('SIS.model.CustomerModel');

        var win = Ext.create('SIS.view.AddCustomer', {
            formModel: record,
            animateTarget: button,
            save: function(model){
                var data = ModelToJson(model);
                Request(
                    '/Home/SaveCustomer',
                    data,
                    function(response)
                    {
                        grdCustomers.getStore().load();
                    }
                );
            }
        });

        win.setRecord();
        win.show();
    },

    onBtnEditClick: function(button, e, eOpts) {
        var form = button.up('customers');
        var grdCustomers = FindControl(form, 'grdCustomers');
        var record = grdCustomers.getSelectedRecord();

        if(IsNullOrEmpty(record))
        {
            Ext.MessageBox.show({
                title: 'მყიდველის რედაქტირება',
                msg: '<center>მყიდველი არ არის მონიშნული</center>',
                width:300,
                iconCls: 'icon-edit',
                buttons: Ext.MessageBox.OK,
                animateTarget: button
            });
        }
        else
        {
            var win = Ext.create('SIS.view.AddCustomer', {
                formModel: record,
                iconCls: 'icon-edit',
                save: function(model){
                    var data = ModelToJson(model);
                    Request(
                        '/Home/SaveCustomer',
                        data,
                        function(response)
                        {
                            grdCustomers.getStore().load();
                        }
                    );
                },
                animateTarget: button
            });

            win.setTitle('მყიდველის რედაქტირება');
            win.setRecord();
            win.show();
        }
    },

    onTxtNameChange: function(field, newValue, oldValue, eOpts) {
        var form = this;

        var btnClear = FindControl(form, 'btnClear');

        if(!IsNullOrEmpty(field.getSelectedRecord()))
        {
            btnClear.setVisible(true);
        }
    },

    onCmbNameSelect: function(combo, records, eOpts) {
        var form = this;

        var grdCustomers = FindControl(form, 'grdCustomers');
        grdCustomers.getStore().clearExtraParams();
        grdCustomers.getStore().removeAll();
        grdCustomers.getStore().addExtraParams({
            filter: {
                Name: combo.getSelectedRecord().get('Name')
            }
        });

        grdCustomers.getStore().loadPage(1);
    },

    onCmbNameAfterRender: function(component, eOpts) {
        var form = this;

        var grdCustomers = FindControl(form, 'grdCustomers');

        grdCustomers.getStore().clearExtraParams();
        grdCustomers.getStore().removeAll();

        grdCustomers.getStore().loadPage(1);
    },

    onBtnClearClick: function(button, e, eOpts) {
        var form = this;

        var cmbName = FindControl(form, 'cmbName');
        cmbName.reset();

        button.setVisible(false);

        var grdCustomers = FindControl(form, 'grdCustomers');

        grdCustomers.getStore().clearExtraParams();
        grdCustomers.getStore().removeAll();

        grdCustomers.getStore().loadPage(1);
    }

});